{"ast":null,"code":"var _jsxFileName = \"/Users/melanieprettyman/Desktop/Notes/ReactPortfolio/ReactPortfolio/Router&AuthenticationProject/EventsApp/frontend/src/pages/Authentication.js\";\nimport AuthForm from '../components/AuthForm';\nimport { json, redirect } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthenticationPage() {\n  return /*#__PURE__*/_jsxDEV(AuthForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 10\n  }, this);\n}\n_c = AuthenticationPage;\nexport default AuthenticationPage;\n\n//This action is triggered whenever the AuthForm is submitted\nexport async function action({\n  request\n}) {\n  //Determine if a login or signup request should be sent\n  // (cannot use useSearchParams hook, so we will re-create our url and use .searchParams method on it)\n  const searchParams = new URL(request.url).searchParams;\n  const mode = searchParams.get('mode') || 'login'; //if it's undefined default to login\n\n  //ensure user cannot change the mode and submit and bad req\n  if (mode !== 'login' && mode !== 'signup') {\n    throw json({\n      message: 'Unsupported mode.'\n    }, {\n      status: 422\n    });\n  }\n\n  //get data submitted by the form (user email and password)\n  const data = await request.formData();\n  const authData = {\n    email: data.get('email'),\n    password: data.get('password')\n  };\n  //send request and await response\n  const response = await fetch('http://localhost:8080/' + mode, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(authData)\n  });\n\n  //handle response\n  if (response.status === 422 || response.status === 401) {\n    return response;\n  }\n  if (!response.ok) {\n    throw json({\n      message: 'Could not authenticate user.'\n    }, {\n      status: 500\n    });\n  }\n\n  //Extract token from response\n  const resData = await response.json();\n  const token = resData.token;\n\n  //store token in local storage with key of 'token'\n  localStorage.setItem('token', token);\n  return redirect('/'); //redirect to starting page post login\n}\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["AuthForm","json","redirect","jsxDEV","_jsxDEV","AuthenticationPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","searchParams","URL","url","mode","get","message","status","data","formData","authData","email","password","response","fetch","method","headers","body","JSON","stringify","ok","resData","token","localStorage","setItem","$RefreshReg$"],"sources":["/Users/melanieprettyman/Desktop/Notes/ReactPortfolio/ReactPortfolio/Router&AuthenticationProject/EventsApp/frontend/src/pages/Authentication.js"],"sourcesContent":["import AuthForm from '../components/AuthForm';\nimport {json, redirect} from 'react-router-dom'\nfunction AuthenticationPage() {\n  return <AuthForm />;\n}\n\nexport default AuthenticationPage;\n\n//This action is triggered whenever the AuthForm is submitted\nexport async function action({request}){\n  //Determine if a login or signup request should be sent\n  // (cannot use useSearchParams hook, so we will re-create our url and use .searchParams method on it)\n  const searchParams = new URL(request.url).searchParams;\n  const mode = searchParams.get('mode') || 'login'; //if it's undefined default to login\n\n  //ensure user cannot change the mode and submit and bad req\n  if( mode !== 'login' && mode !== 'signup'){\n    throw json({message: 'Unsupported mode.'}, {status:422})\n  }\n\n\n  //get data submitted by the form (user email and password)\n  const data = await request.formData();\n  const authData = {\n    email: data.get('email'),\n    password: data.get('password'),\n  }\n  //send request and await response\n   const response = await fetch('http://localhost:8080/' + mode, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(authData),\n  });\n\n  //handle response\n  if (response.status === 422 || response.status === 401) {\n    return response;\n  }\n\n  if (!response.ok) {\n    throw json({ message: 'Could not authenticate user.' }, { status: 500 });\n  }\n\n  //Extract token from response\n    const resData = await response.json();\n    const token = resData.token;\n\n    //store token in local storage with key of 'token'\n    localStorage.setItem('token', token);\n\n    return redirect('/');//redirect to starting page post login\n\n}\n\n"],"mappings":";AAAA,OAAOA,QAAQ,MAAM,wBAAwB;AAC7C,SAAQC,IAAI,EAAEC,QAAQ,QAAO,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAC/C,SAASC,kBAAkBA,CAAA,EAAG;EAC5B,oBAAOD,OAAA,CAACJ,QAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACrB;AAACC,EAAA,GAFQL,kBAAkB;AAI3B,eAAeA,kBAAkB;;AAEjC;AACA,OAAO,eAAeM,MAAMA,CAAC;EAACC;AAAO,CAAC,EAAC;EACrC;EACA;EACA,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAACF,OAAO,CAACG,GAAG,CAAC,CAACF,YAAY;EACtD,MAAMG,IAAI,GAAGH,YAAY,CAACI,GAAG,CAAC,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC;;EAElD;EACA,IAAID,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,QAAQ,EAAC;IACxC,MAAMf,IAAI,CAAC;MAACiB,OAAO,EAAE;IAAmB,CAAC,EAAE;MAACC,MAAM,EAAC;IAAG,CAAC,CAAC;EAC1D;;EAGA;EACA,MAAMC,IAAI,GAAG,MAAMR,OAAO,CAACS,QAAQ,CAAC,CAAC;EACrC,MAAMC,QAAQ,GAAG;IACfC,KAAK,EAAEH,IAAI,CAACH,GAAG,CAAC,OAAO,CAAC;IACxBO,QAAQ,EAAEJ,IAAI,CAACH,GAAG,CAAC,UAAU;EAC/B,CAAC;EACD;EACC,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,GAAGV,IAAI,EAAE;IAC7DW,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,QAAQ;EAC/B,CAAC,CAAC;;EAEF;EACA,IAAIG,QAAQ,CAACN,MAAM,KAAK,GAAG,IAAIM,QAAQ,CAACN,MAAM,KAAK,GAAG,EAAE;IACtD,OAAOM,QAAQ;EACjB;EAEA,IAAI,CAACA,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM/B,IAAI,CAAC;MAAEiB,OAAO,EAAE;IAA+B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EAC1E;;EAEA;EACE,MAAMc,OAAO,GAAG,MAAMR,QAAQ,CAACxB,IAAI,CAAC,CAAC;EACrC,MAAMiC,KAAK,GAAGD,OAAO,CAACC,KAAK;;EAE3B;EACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;EAEpC,OAAOhC,QAAQ,CAAC,GAAG,CAAC,CAAC;AAEzB;AAAC,IAAAQ,EAAA;AAAA2B,YAAA,CAAA3B,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}